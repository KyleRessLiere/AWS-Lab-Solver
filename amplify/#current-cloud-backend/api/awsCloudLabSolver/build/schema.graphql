
type Lab @aws_iam @aws_api_key {
  id: ID!
  sshKey: String
  bastionHost: String
  user1Secret: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Post @aws_iam @aws_api_key {
  id: ID!
  title: String!
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  content: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Comment @aws_iam @aws_api_key {
  id: ID!
  postID: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelLabConnection @aws_api_key @aws_iam {
  items: [Lab]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelLabFilterInput {
  id: ModelIDInput
  sshKey: ModelStringInput
  bastionHost: ModelStringInput
  user1Secret: ModelStringInput
  and: [ModelLabFilterInput]
  or: [ModelLabFilterInput]
  not: ModelLabFilterInput
}

type Query {
  getLab(id: ID!): Lab @aws_api_key @aws_iam
  listLabs(filter: ModelLabFilterInput, limit: Int, nextToken: String): ModelLabConnection @aws_api_key @aws_iam
  syncLabs(filter: ModelLabFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelLabConnection @aws_api_key @aws_iam
  getPost(id: ID!): Post @aws_api_key @aws_iam
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_api_key @aws_iam
  syncPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostConnection @aws_api_key @aws_iam
  getComment(id: ID!): Comment @aws_api_key @aws_iam
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_api_key @aws_iam
  syncComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCommentConnection @aws_api_key @aws_iam
  commentsByPostID(postID: ID!, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_api_key @aws_iam
}

input ModelLabConditionInput {
  sshKey: ModelStringInput
  bastionHost: ModelStringInput
  user1Secret: ModelStringInput
  and: [ModelLabConditionInput]
  or: [ModelLabConditionInput]
  not: ModelLabConditionInput
}

input CreateLabInput {
  id: ID
  sshKey: String
  bastionHost: String
  user1Secret: String
  _version: Int
}

input UpdateLabInput {
  id: ID!
  sshKey: String
  bastionHost: String
  user1Secret: String
  _version: Int
}

input DeleteLabInput {
  id: ID!
  _version: Int
}

type Mutation {
  createLab(input: CreateLabInput!, condition: ModelLabConditionInput): Lab @aws_api_key @aws_iam
  updateLab(input: UpdateLabInput!, condition: ModelLabConditionInput): Lab @aws_api_key @aws_iam
  deleteLab(input: DeleteLabInput!, condition: ModelLabConditionInput): Lab @aws_api_key @aws_iam
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment @aws_api_key @aws_iam
}

input ModelSubscriptionLabFilterInput {
  id: ModelSubscriptionIDInput
  sshKey: ModelSubscriptionStringInput
  bastionHost: ModelSubscriptionStringInput
  user1Secret: ModelSubscriptionStringInput
  and: [ModelSubscriptionLabFilterInput]
  or: [ModelSubscriptionLabFilterInput]
}

type Subscription {
  onCreateLab(filter: ModelSubscriptionLabFilterInput): Lab @aws_subscribe(mutations: ["createLab"]) @aws_api_key @aws_iam
  onUpdateLab(filter: ModelSubscriptionLabFilterInput): Lab @aws_subscribe(mutations: ["updateLab"]) @aws_api_key @aws_iam
  onDeleteLab(filter: ModelSubscriptionLabFilterInput): Lab @aws_subscribe(mutations: ["deleteLab"]) @aws_api_key @aws_iam
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["createPost"]) @aws_api_key @aws_iam
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["updatePost"]) @aws_api_key @aws_iam
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["deletePost"]) @aws_api_key @aws_iam
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["createComment"]) @aws_api_key @aws_iam
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["updateComment"]) @aws_api_key @aws_iam
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["deleteComment"]) @aws_api_key @aws_iam
}

type ModelPostConnection @aws_api_key @aws_iam {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input ModelPostConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

input CreatePostInput {
  id: ID
  title: String!
  content: String
  _version: Int
}

input UpdatePostInput {
  id: ID!
  title: String
  content: String
  _version: Int
}

input DeletePostInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
}

type ModelCommentConnection @aws_iam @aws_api_key {
  items: [Comment]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCommentFilterInput {
  id: ModelIDInput
  postID: ModelIDInput
  content: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input ModelCommentConditionInput {
  postID: ModelIDInput
  content: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

input CreateCommentInput {
  id: ID
  postID: ID!
  content: String!
  _version: Int
}

input UpdateCommentInput {
  id: ID!
  postID: ID
  content: String
  _version: Int
}

input DeleteCommentInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  postID: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
}

